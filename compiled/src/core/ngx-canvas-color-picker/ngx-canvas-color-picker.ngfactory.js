/**
 * @fileoverview This file is generated by the Angular template compiler.
 * Do not edit.
 * @suppress {suspiciousCode,uselessCode,missingProperties,missingOverride}
 */
/* tslint:disable */
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const i0 = require("@angular/core");
const i1 = require("@angular/common");
const i2 = require("../../../../src/core/ngx-canvas-color-picker/ngx-canvas-color-picker");
const styles_NgxCanvasColorPickerComponent = ['canvas[_ngcontent-%COMP%] {\n    cursor: crosshair;\n    }\n    .pick[_ngcontent-%COMP%] {\n      width: 25px;\n      height: 25px;\n    }\n    .opacity[_ngcontent-%COMP%] {\n      width: 10px;\n      height: 20px;\n      float:left;\n      margin: 1px solid black;\n    }\n    .opacityContainer[_ngcontent-%COMP%]{\n      height: 25px;\n    }'];
exports.RenderType_NgxCanvasColorPickerComponent = i0.ɵcrt({ encapsulation: 0,
    styles: styles_NgxCanvasColorPickerComponent, data: {} });
function View_NgxCanvasColorPickerComponent_2(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 1, 'span', [], null, null, null, null, null)), (_l()(),
            i0.ɵted(null, ['^']))], null, null);
}
function View_NgxCanvasColorPickerComponent_1(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 4, 'div', [['class',
                'opacity']], [[4, 'background', null]], [[null, 'click']], (_v, en, $event) => {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                const pd_0 = (_co.changeOpacity(_v.context.$implicit.value) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), i0.ɵted(null, ['\n          '])),
        (_l()(), i0.ɵand(16777216, null, null, 1, null, View_NgxCanvasColorPickerComponent_2)),
        i0.ɵdid(16384, null, 0, i1.NgIf, [i0.ViewContainerRef, i0.TemplateRef], { ngIf: [0,
                'ngIf'] }, null), (_l()(), i0.ɵted(null, ['\n        ']))], (_ck, _v) => {
        var _co = _v.component;
        const currVal_1 = (_co.opacityCanvas === _v.context.$implicit.value);
        _ck(_v, 3, 0, currVal_1);
    }, (_ck, _v) => {
        var _co = _v.component;
        const currVal_0 = (((('rgba(' + _co.rgbLine) + ', ') + _v.context.$implicit.value) + ')');
        _ck(_v, 0, 0, currVal_0);
    });
}
function View_NgxCanvasColorPickerComponent_0(_l) {
    return i0.ɵvid(0, [i0.ɵqud(402653184, 1, { canvas: 0 }), (_l()(), i0.ɵted(null, ['\n    '])), (_l()(), i0.ɵeld(0, null, null, 0, 'div', [['class',
                'pick']], [[4, 'background', null]], [[null, 'click']], (_v, en, $event) => {
            var ad = true;
            var _co = _v.component;
            if (('click' === en)) {
                const pd_0 = ((_co.open = !_co.open) !== false);
                ad = (pd_0 && ad);
            }
            return ad;
        }, null, null)), (_l()(), i0.ɵted(null, ['\n    '])), (_l()(),
            i0.ɵeld(0, null, null, 9, 'div', [], [[8, 'hidden', 0]], null, null, null, null)), (_l()(), i0.ɵted(null, ['\n    '])), (_l()(), i0.ɵeld(0, [[1, 0], ['canvas', 1]], null, 0, 'canvas', [['id', 'canvas_picker']], [[8, 'width', 0], [8, 'height', 0], [4, 'opacity', null]], null, null, null, null)), (_l()(), i0.ɵted(null, ['\n    '])), (_l()(), i0.ɵeld(0, null, null, 4, 'div', [['class',
                'opacityContainer']], null, null, null, null, null)), (_l()(), i0.ɵted(null, ['\n        '])), (_l()(), i0.ɵand(16777216, null, null, 1, null, View_NgxCanvasColorPickerComponent_1)),
        i0.ɵdid(802816, null, 0, i1.NgForOf, [i0.ViewContainerRef, i0.TemplateRef,
            i0.IterableDiffers], { ngForOf: [0, 'ngForOf'] }, null), (_l()(), i0.ɵted(null, ['\n      '])), (_l()(), i0.ɵted(null, ['\n    '])), (_l()(), i0.ɵted(null, ['\n  ']))], (_ck, _v) => {
        var _co = _v.component;
        const currVal_5 = _co.opacityArray;
        _ck(_v, 11, 0, currVal_5);
    }, (_ck, _v) => {
        var _co = _v.component;
        const currVal_0 = _co.color;
        _ck(_v, 2, 0, currVal_0);
        const currVal_1 = _co.open;
        _ck(_v, 4, 0, currVal_1);
        const currVal_2 = _co.width;
        const currVal_3 = _co.height;
        const currVal_4 = _co.opacityCanvas;
        _ck(_v, 6, 0, currVal_2, currVal_3, currVal_4);
    });
}
exports.View_NgxCanvasColorPickerComponent_0 = View_NgxCanvasColorPickerComponent_0;
function View_NgxCanvasColorPickerComponent_Host_0(_l) {
    return i0.ɵvid(0, [(_l()(), i0.ɵeld(0, null, null, 1, 'ngx-canvas-color-picker', [], null, null, null, View_NgxCanvasColorPickerComponent_0, exports.RenderType_NgxCanvasColorPickerComponent)), i0.ɵdid(4833280, null, 0, i2.NgxCanvasColorPickerComponent, [], null, null)], (_ck, _v) => {
        _ck(_v, 1, 0);
    }, null);
}
exports.View_NgxCanvasColorPickerComponent_Host_0 = View_NgxCanvasColorPickerComponent_Host_0;
exports.NgxCanvasColorPickerComponentNgFactory = i0.ɵccf('ngx-canvas-color-picker', i2.NgxCanvasColorPickerComponent, View_NgxCanvasColorPickerComponent_Host_0, { width: 'width',
    height: 'height', square: 'square', close: 'close', open: 'open' }, { hexData: 'hexData',
    rgbData: 'rgbData' }, []);
//# sourceMappingURL=data:application/json;base64,